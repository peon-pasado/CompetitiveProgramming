/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 */

#include <bits/stdc++.h>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
const int mod = 10007;
const int maxn = 5e4 + 5;
const int maxk = 505;
vi g[maxn];
int dp[maxn][maxk];
int n, k;

int add(int a, int b) {
    return (a + b) % mod;
}

int mul(ll a, ll b) {
    return a * b % mod;
}

void dfs(int x, int p) {
    trav(v, g[x]) {
        if (v == p) continue;
        dfs(v, x);
        re(i, 0, k + 1) {
            dp[x][i] = add(dp[x][i], add(dp[v][i] + (i <= 1), i > 0 ? dp[v][i-1] : 0));
        }
    }
}

int temp[maxk];
void dfs_reroot(int x, int p) {
    if (p != 0) {
        re(i, 0, k + 1) temp[i] = dp[p][i];
        re(i, 0, k + 1) {
            temp[i] = add(temp[i], mod - add(dp[x][i] + (i <= 1), i > 0 ? dp[x][i-1] : 0));
        }
        re(i, 0, k + 1) {
            dp[x][i] = add(dp[x][i], add(temp[i] + (i <= 1), i > 0 ? temp[i-1] : 0));
        }
    }
    trav(v, g[x]) {
        if (v == p) continue;
        dfs_reroot(v, x);
    }
}
int f[maxk];
int stirling[maxk][maxk];

class JZPTREE {
public:

    void solveOne(istream& in, ostream& out) {
        in >> n >> k;
        re(i, 1, n+1) {
            g[i].clear();
        }
        re(i, 1, n) {
            int a, b;
            in >> a >> b;
            g[a].eb(b);
            g[b].eb(a);
        }
        memset(dp, 0, sizeof dp);
        dfs(1, 0);
        dfs_reroot(1, 0);
        re(i, 1, n+1) {
            int ans = 0;
            re(j, 0, k+1) {
                ans = add(ans, mul(mul(stirling[k][j], f[j]), dp[i][j]));
            }
            out << ans << endl;
        }
    }

    void solve(istream& in, ostream& out) {
        f[0] = 1, stirling[0][0] = 1;
        re(i, 1, maxk) {
            f[i] = mul(i, f[i-1]);
            stirling[i][0] = stirling[0][i] = 0;
        }
        re(i, 1, maxk) {
            re(j, 1, i+1) {
                stirling[i][j] = add(stirling[i-1][j-1], mul(j, stirling[i-1][j]));
            }
        }
        int testNumber = 1;
        in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
	JZPTREE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
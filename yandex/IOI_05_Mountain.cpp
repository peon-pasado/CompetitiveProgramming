/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag dynamic_segment_tree, lazy_propagation
 * @idea trivial application of dynamic segement tree.
 */

#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <complex>
#include <climits>
#include <iomanip>
#include <numeric>
#include <functional>
#include <fstream>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <stack>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
#define mset(m ,v) memset(m, v, sizeof(m))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
using vii = vector<ii>;
using si = set<int>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int random(int l, int r) {
  return uniform_int_distribution<int>(l, r)(rng);
}

const int mod = 1e9 + 7;

int add(int a, int b, int m=mod) {
    return a+b < m? a+b : a+b-m;
}

int mul(ll a, ll b, int m=mod) {
    return a*b%m;
}

int ex(int a, int b, int m=mod) {
    int r=1;
    while (b > 0) {
        if (b&1) r = mul(r, a, m);
        a = mul(a, a, m);
        b >>= 1;
    }
    return r;
}

const int inf = 1.2e9;
const int max_n = 6e6 + 10;

struct STNode {
    ll sum;
    ll max;
} st[max_n];
int trie[max_n][2];
bool lazy[max_n];
int inc_lazy[max_n];
int elem = 0;

STNode merge(STNode p, STNode q) {
  return {p.sum + q.sum, max(p.sum + q.max, p.max)};
}

void update_one(int root, int l, int r, int v) {
  lazy[root] = 1;
  inc_lazy[root] = v;
  st[root].sum = (r - l + 1) *1ll* v;
  st[root].max = max(1ll*v, st[root].sum);
}

void push(int root, int l, int mid, int r) {
  if (lazy[root]) {
    update_one(trie[root][0], l, mid, inc_lazy[root]);
    update_one(trie[root][1], mid+1, r, inc_lazy[root]);
    lazy[root] = 0;
  }
}

void update(int ll, int rr, int v, int root, int l, int r) {
  if (r < ll || rr < l) return;
  if (ll <= l && r <= rr) {
    update_one(root, l, r, v);
    return;
  }
  if (!trie[root][0]) trie[root][0] = ++elem;
  if (!trie[root][1]) trie[root][1] = ++elem;
  int mid = (l + r) / 2;
  push(root, l, mid, r);
  update(ll, rr, v, trie[root][0], l, mid);
  update(ll, rr, v, trie[root][1], mid+1, r);
  st[root] = merge(st[trie[root][0]], st[trie[root][1]]);
}

int query(ll h, int root, int l, int r) {
  if (st[root].max <= h) return r;
  if (l == r) return r - 1;
  if (!trie[root][0]) trie[root][0] = ++elem;
  if (!trie[root][1]) trie[root][1] = ++elem;
  int mid = (l + r) / 2;
  push(root, l, mid, r);
  if (st[trie[root][0]].max > h) {
    return query(h, trie[root][0], l, mid);
  }
  return query(h - st[trie[root][0]].sum, trie[root][1], mid+1, r);
}

class IOI_05_Mountains {
public:
  void solveOne(istream& in, ostream& out) {
    int n;
    in >> n;
    int root = ++elem;
    char type;
    while (in >> type) {
      if (type == 'E') break;
      if (type == 'Q') {
        int h;
        in >> h;
        out << query(h, root, 0, n) << endl;
      }
      if (type == 'I') {
        int a, b, d;
        in >> a >> b >> d;
        update(a, b, d, root, 0, n);
      }
    }
  }

  void solve(istream& in, ostream& out) {
    out.precision(10);
    out << fixed;
    int testNumber = 1;
    //in >> testNumber;
    re(tc, 1, testNumber+1) {
      //out << "Case #" << tc << ": ";
      solveOne(in, out);
    }
  }
};


int main() {
    //freopen("in", "r", stdin);
    //freopen("out", "w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    IOI_05_Mountains solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}

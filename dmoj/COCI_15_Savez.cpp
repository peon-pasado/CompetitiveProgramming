/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag hashing, dp, kmp
 * @idea
 *      - easy hashing application.
 */

#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <complex>
#include <climits>
#include <iomanip>
#include <numeric>
#include <functional>
#include <fstream>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <stack>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
#define mset(m ,v) memset(m, v, sizeof(m))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
using vii = vector<ii>;
using si = set<int>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int random(int l, int r) {
  return uniform_int_distribution<int>(l, r)(rng);
}

const int mod = 1e9 + 7;

int add(int a, int b, int m=mod) {
    return a+b < m? a+b : a+b-m;
}

int mul(ll a, ll b, int m=mod) {
    return a*b%m;
}

int ex(int a, int b, int m=mod) {
    int r=1;
    while (b > 0) {
        if (b&1) r = mul(r, a, m);
        a = mul(a, a, m);
        b >>= 1;
    }
    return r;
}

const int inf = 1.2e9;
const int maxn = 5e2 + 10;
string s;
int b[2000005];
bitset<2000005> valid;
map<ll, int> memo;

class COCI15Contest24Savez {
public:
    void solveOne(istream& in, ostream& out) {
      int n;
      in >> n;
      re(i, 0, n) {
        in >> s;
        int m = s.size();
        b[0] = -1;
        for (int j = 1; j <= m; ++j) {
          b[j] = b[j-1];
          while (b[j] != -1 && s[b[j]] != s[j-1]) b[j] = b[b[j]];
          b[j] += 1;
        }
        int t = m;
        while (t > 0) valid[t] = 1, t = b[t];
        int pos = 0;
        int ans = 1;
        ll hash = 0;
        for (auto c : s) {
          pos += 1;
          hash = hash * 257 + c;
          if (memo.count(hash) && valid[pos]) {
            ans = max(ans, memo[hash] + 1);
          }
        }
        t = m;
        while (t > 0) valid[t] = 0, t = b[t];
        memo[hash] = ans;
      }
      int res = 0;
      for (auto e : memo) res = max(res, e.second);
      out << res << '\n';
    }

    void solve(istream& in, ostream& out) {
        out.precision(10);
        out << fixed;
        int testNumber = 1;
        //in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
    //freopen("in", "r", stdin);
    //freopen("out", "w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    COCI15Contest24Savez solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}

/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag dsu_on_trees, priority_queue
 * @idea
 *      - we can use the idea small to large and
 *      maintain the maximum number of elements with sum <= m,
 *      the merge take O(nlogn), the final complexity es O(nlog^2n).
 */

#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <complex>
#include <climits>
#include <iomanip>
#include <numeric>
#include <functional>
#include <fstream>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <stack>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
#define mset(m ,v) memset(m, v, sizeof(m))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
using vii = vector<ii>;
using si = set<int>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int random(int l, int r) {
  return uniform_int_distribution<int>(l, r)(rng);
}

const int mod = 1e9 + 7;

int add(int a, int b, int m=mod) {
    return a+b < m? a+b : a+b-m;
}

int mul(ll a, ll b, int m=mod) {
    return a*b%m;
}

int ex(int a, int b, int m=mod) {
    int r=1;
    while (b > 0) {
        if (b&1) r = mul(r, a, m);
        a = mul(a, a, m);
        b >>= 1;
    }
    return r;
}

const int inf = 1.2e9;
const int maxn = 1e5 + 10;
int b[maxn], c[maxn], l[maxn];
vi g[maxn];
int sz_subtree[maxn];
priority_queue<int> weights_set[maxn];
ll weights_sum[maxn];
int n, m;

void add_weight(int x, int v) {
  weights_set[x].push(v);
  weights_sum[x] += v;
  if (weights_sum[x] > m) {
    int u = weights_set[x].top();
    weights_sum[x] -= u;
    weights_set[x].pop();
  }
}

ll dfs(int x) {
  ll res = 0;
  sz_subtree[x] = 1;
  int big = -1;
  for (int v : g[x]) {
    res = max(res, dfs(v));
    sz_subtree[x] += sz_subtree[v];
    if (big == -1 || sz_subtree[big] < sz_subtree[v]) {
      big = v;
    }
  }
  if (~big) {
    weights_set[x].swap(weights_set[big]);
    weights_sum[x] = weights_sum[big];
  }
  add_weight(x, c[x]);
  for (int v : g[x]) {
    while (!weights_set[v].empty()) {
      add_weight(x, weights_set[v].top());
      weights_set[v].pop();
    }
  }
  res = max(res, (ll)weights_set[x].size() * l[x]);
  return res;
}

class APIO12P1Dispatching {
public:
    void solveOne(istream& in, ostream& out) {
      in >> n >> m;
      re(i, 1, n+1) {
        in >> b[i] >> c[i] >> l[i];
        g[b[i]].eb(i);
      }
      out << dfs(0) << '\n';
    }

    void solve(istream& in, ostream& out) {
        out.precision(10);
        out << fixed;
        int testNumber = 1;
        //in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
    //freopen("in", "r", stdin);
    //freopen("out", "w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    APIO12P1Dispatching solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}

/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag greedy, min_queue
 * @idea
 *      - we first process the maximum heights with a min queue
 *      - then we can use a max queue to know which element 
 *      predominates in a given position, if there are ties we 
 *      consider the max on the right. greedily we put the first 
 *      time it was needed or there is nothing to cover.
 */

#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <complex>
#include <climits>
#include <iomanip>
#include <numeric>
#include <functional>
#include <fstream>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <stack>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
#define mset(m ,v) memset(m, v, sizeof(m))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
using vii = vector<ii>;
using si = set<int>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int random(int l, int r) {
  return uniform_int_distribution<int>(l, r)(rng);
}

const int mod = 1e9 + 7;

int add(int a, int b, int m=mod) {
    return a+b < mod? a+b : a+b-mod;
}

int mul(ll a, ll b, int m=mod) {
    return a*b%mod;
}

int ex(int a, int b, int m=mod) {
    int r=1;
    while (b > 0) {
        if (b&1) r = mul(r, a);
        a = mul(a, a);
        b >>= 1;
    }
    return r;
}

const int inf = 1.2e9;
const int maxn = 5e5 + 10;

template <class T, typename compare=less<T>>
struct optQueue {
    stack<T> l, r;
    T best;
    optQueue() {}
    T f(T x, T y) {
      return compare()(x, y) ? x : y;
    }
    void add(T c) {
      best = r.empty() ? c : f(best, c);
      r.push(c);
    }
    bool empty() {
      return l.empty() && r.empty();
    }
    size_t size() {
      return l.size() + r.size();
    }
    void pop() {
      assert(!empty());
      if (l.empty()) {
        while (!r.empty()) {
          if (l.empty()) l.push(r.top());
          else l.push(f(l.top(), r.top()));
          r.pop();
        }
      }
      l.pop();
    }
    T get() {
      assert(!empty());
      if (l.empty()) return best;
      if (r.empty()) return l.top();
      return f(l.top(), best);
    }
};

vi h;
struct Index {
    int x;
    Index() {}
    Index(int x) : x(x) {}
    operator int() const { return x; }
    bool operator<(Index other) const {
      return ii(h[x], x) > ii(h[(int)other], (int)other);
    }
};

class TaskOGRADA {
public:
    void solveOne(istream& in, ostream& out) {
      int n, x;
      in >> n >> x;
      vi a(n);
      h.assign(n, 0);
      trav(&e, a) in >> e;
      optQueue<int> Q;
      re(i, 0, n) {
        Q.add(a[i]);
        if (Q.size() > x) Q.pop();
        if (Q.size() == x) h[i - x + 1] = Q.get();
      }
      optQueue<Index> P;
      ll ans1 = 0;
      int ans2 = 0;
      int height = -1;
      int limit = -1;
      re(i, 0, n) {
        if (i < n - x + 1) P.add(i);
        int cur = P.get();
        ans1 += h[cur];
        if (height != h[cur] || limit < i) {
          ans2 += 1;
          height = h[cur];
          limit = cur + x - 1;
        }
        if (i - x + 1 >= 0) P.pop();
      }
      ans1 = accumulate(all(a), 0ll) - ans1;
      out << ans1 << '\n';
      out << ans2 << '\n';
    }

    void solve(istream& in, ostream& out) {
        out.precision(10);
        out << fixed;
        int testNumber = 1;
        //in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
    //freopen("in", "r", stdin);
    //freopen("out", "w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    TaskOGRADA solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}

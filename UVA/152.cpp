/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag geometry, points
 * @idea:
 *      - only a good points template.
 */

#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <complex>
#include <climits>
#include <iomanip>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
#define mset(m ,v) memset(m, v, sizeof(m))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
using vii = vector<ii>;
const int mod = 1e9 + 7;

int add(int a, int b, int m=mod) {
    return a+b < mod? a+b : a+b-mod;
}

int mul(ll a, ll b, int m=mod) {
    return a*b%mod;
}

int ex(int a, int b, int m=mod) {
    int r=1;
    while (r > 0) {
        if (b&1) r = mul(r, a);
        a = mul(a, a);
        b >>= 1;
    }
    return r;
}

const int inf = 1.2e9;
const int maxn = 5e5 + 10;

template <class T>
struct Point {
    T x, y, z;
    Point() {}
    Point(T x, T y, T z): x(x), y(y), z(z) {}
    Point operator+(Point q) {return Point(x+q.x, y+q.y, z+q.z);}
    Point operator-(Point q) {return Point(x-q.x, y-q.y, z-q.z);}
    T operator*(Point q) {return x*q.x + y*q.y + z*q.z;}
    //T operator^(Point q) {return x*q.y - y*q.x;}
    T norm2() {return (*this) * (*this);}
    T norm() {return sqrt(norm2());}
};

int cnt[100 + 10];

class UVA152 {
public:
    void solveOne(istream& in, ostream& out) {
      vector<Point<int>> p;
      int x, y, z;
      while (in >> x >> y >> z, x+y+z) {
        p.push_back(Point<int>(x, y, z));
      }
      int n = sz(p);
      re(i, 0, n) {
        int min_dist = 1e9;
        re(j, 0, n) {
          if (i == j) continue;
          int t = (p[i] - p[j]).norm2();
          min_dist = min(min_dist, t);
        }
        if (min_dist < 100) {
          cnt[min_dist] += 1;
        }
      }
      for (int i = 0; i <= 9; ++i) {
        int sum = 0;
        for (int j = i * i; j < (i+1)*(i+1); ++j) {
          sum += cnt[j];
        }
        out << setw(4) << sum;
      }
      out << endl;
    }

    void solve(istream& in, ostream& out) {
        //out.precision(10);
        //out << fixed;
        int testNumber = 1;
        //in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
    //freopen("in", "r", stdin);
    //freopen("out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    UVA152 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}

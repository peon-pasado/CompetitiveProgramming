/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag Meissel-Lehmer, mobius inversion, number theory, inclusion-exclusion principle 
 * @idea:
 *    - with mobius inversion we can solve with #square_free_up_to_n - 2 * #primes_up_to_n.
 *    - since n is very large, we can calculate the first term with inclusion-exclusion principle
 *    - the last term with meissel-lehmer algorithm.
 */

#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <complex>
#include <climits>
#include <iomanip>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
#define mset(m ,v) memset(m, v, sizeof(m))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
using vii = vector<ii>;
const int mod = 998244353;

int add(int a, int b, int m=mod) {
    return a+b < mod? a+b : a+b-mod;
}

int mul(ll a, ll b, int m=mod) {
    return a*b%mod;
}

int ex(int a, int b, int m=mod) {
    int r=1;
    while (r > 0) {
        if (b&1) r = mul(r, a);
        a = mul(a, a);
        b >>= 1;
    }
    return r;
}

const int inf = 1.2e9;
const int maxn = 5e5 + 10;
// Primes up to 10^12 can be counted in ~1 second.
const int MAXN = 1000005; // MAXN is the maximum value of sqrt(N) + 2
bool composite[MAXN];
int prec[MAXN];
vector<int> P;
int mu[MAXN];

void sieve() {
  mu[1] = 1;
  for (int i = 2; i < MAXN; ++i) {
    prec[i] = prec[i-1];
    if (!composite[i]) {
      P.eb(i);
      prec[i] += 1;
      mu[i] = -1;
    }
    for (int p : P) {
      if (p * i >= MAXN) break;
      composite[p * i] = 1;
      if (i % p == 0) {
        mu[p * i] = 0;
        break;
      } else {
        mu[p * i] = -mu[i];
      }
    }
  }
}

ll rec(ll N, int K) {
  if (N <= 1 || K < 0) return 0;
  if (N <= P[K]) return N-1;
  if (N < MAXN && 1ll * P[K]*P[K] > N) return N-1 - prec[N] + prec[P[K]];
  const int LIM = 250;
  static int memo[LIM*LIM][LIM];
  bool ok = N < LIM*LIM;
  if (ok && memo[N][K]) return memo[N][K];
  ll ret = N/P[K] - rec(N/P[K], K-1) + rec(N, K-1);
  if (ok) memo[N][K] = ret;
  return ret;
}

ll count_primes(ll N) { // less than or equal to
  if (N < MAXN) return prec[N];
  int K = prec[(int)sqrt(N) + 1];
  return N-1 - rec(N, K) + prec[P[K]];
}


class A380948 {
public:
    void solveOne(istream& in, ostream& out) {
      sieve();
      int ans = 0;
      long long n;
      in >> n;
      for (long long i = 1; i * i <= n; ++i) {
        ans = add(ans, mul(mod + mu[i], (n / (i * i))%mod));
      }
      ans = add(ans, mod - mul(2, count_primes(n)));
      out << ans << endl;
    }

    void solve(istream& in, ostream& out) {
        out.precision(10);
        out << fixed;
        int testNumber = 1;
        //in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
    //freopen("in", "r", stdin);
    //freopen("out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    A380948 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}

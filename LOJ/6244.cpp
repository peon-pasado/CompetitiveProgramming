/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 * @tag generalized inclusion-exclusion principle
 * @idea
 *  - we can count this kind of problem with generalized inclusion exclusion principle with elements in k sets.
 */

#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <complex>
#include <climits>
#include <iomanip>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
#define mset(m ,v) memset(m, v, sizeof(m))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
using vii = vector<ii>;
const int mod = 1e9 + 7;

int add(int a, int b, int m=mod) {
    return a+b < mod? a+b : a+b-mod;
}

int mul(ll a, ll b, int m=mod) {
    return a*b%mod;
}

int ex(int a, int b, int m=mod) {
    int r=1;
    while (r > 0) {
        if (b&1) r = mul(r, a);
        a = mul(a, a);
        b >>= 1;
    }
    return r;
}

const int inf = 1.2e9;
const int maxn = 1e6 + 10;
int fact[maxn], inv_fact[maxn], inv[maxn];


class C380948 {
public:
    void solveOne(istream& in, ostream& out) {
      fact[0] = inv_fact[0] = 1;
      inv[1] = 1;
      re(i, 1, maxn) {
        if (i >= 2) inv[i] = mul(mod/i, mod - inv[mod%i]);
        fact[i] = mul(fact[i-1], i);
        inv_fact[i] = mul(inv_fact[i-1], inv[i]);
      }
      auto comb = [&](int n, int k)->int {
        if (n < k) return 0;
        return mul(fact[n], mul(inv_fact[k], inv_fact[n-k]));
      };
      int n, k, x;
      in >> n >> k >> x;
      int ans = 0;
      re(m, x, k + 1) {
        int temp = mul(comb(m, x), mul(comb(k, m), comb(n-m, k-m)));
        temp = mul(temp, fact[k-m]);
        if ((m-x)&1) ans = add(ans, mod - temp);
        else ans = add(ans, temp);
      }
      out << ans << endl;
    }

    void solve(istream& in, ostream& out) {
        out.precision(10);
        out << fixed;
        int testNumber = 1;
        //in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
    //freopen("in", "r", stdin);
    //freopen("out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    C380948 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}

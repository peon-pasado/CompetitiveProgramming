/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Miguel Mini
 */

#include <bits/stdc++.h>
#define sz(x) (int)x.size()
#define trav(v, x) for (auto v : x)
#define re(x, y, z) for (int x=y; x<z; ++x)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define set_to(x, v) fill(all(x), v)
#define eb emplace_back
#define lso(x) ((x)&-(x))
using namespace std;
using ll = long long;
using ii = pair<int, int>;
using vi = vector<int>;
const int mod = 1e9 + 7;
const int maxn = 1e5 + 10;
long long a[maxn];
int n;

long long gcd(long long a, long long b) {
    return b ? gcd(b, a%b) : a;
}

class R {
public:

    void solveOne(istream& in, ostream& out) {
        in >> n;
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        vector<pair<long long, int>> r;
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            long long temp = a[i];
            for (int j = sz(r) - 1; j >= 0; --j) {
                auto& e = r[j];
                temp = e.first = gcd(e.first, temp);
                e.second += 1;
            }
            r.push_back({a[i], 1});
            int j = 0;
            for (int k = 1; k < r.size(); ++k) {
                if (r[j].first != r[k].first) {
                    r[++j] = r[k];
                }
            }
            r.resize(j + 1);
            for (auto e : r) ans = max(ans, e.first * e.second);
        }
        out << ans << endl;
    }

    void solve(istream& in, ostream& out) {
        int testNumber = 1;
        in >> testNumber;
        re(tc, 1, testNumber+1) {
            //out << "Case #" << tc << ": ";
            solveOne(in, out);
        }
    }
};


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
	R solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}